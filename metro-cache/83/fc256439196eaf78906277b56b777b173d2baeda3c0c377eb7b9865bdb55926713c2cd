{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var API_KEY;\n  var Geocoder;\n\n  var _default = Geocoder = {\n    init: function init(apiKey) {\n      API_KEY = apiKey;\n    },\n\n    get isInit() {\n      return !!API_KEY;\n    },\n\n    setApiKey: function setApiKey(API_KEY) {\n      this.init(API_KEY);\n    },\n    from: function from() {\n      var queryParams,\n          _len,\n          params,\n          _key,\n          url,\n          response,\n          data,\n          _args = arguments;\n\n      return _regenerator.default.async(function from$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (Geocoder.isInit) {\n                _context.next = 2;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.NOT_INITIATED,\n                message: \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\"\n              };\n\n            case 2:\n              for (_len = _args.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n                params[_key] = _args[_key];\n              }\n\n              if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n                latlng: params[0] + \",\" + params[1]\n              };else if (params[0] instanceof Array) queryParams = {\n                  latlng: params[0][0] + \",\" + params[0][1]\n                };else if (params[0] instanceof Object) queryParams = {\n                    latlng: (params[0].lat || params[0].latitude) + \",\" + (params[0].lng || params[0].longitude)\n                  };else if (typeof params[0] === 'string') queryParams = {\n                      address: params[0]\n                    };\n\n              if (queryParams) {\n                _context.next = 6;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.INVALID_PARAMETERS,\n                message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n              };\n\n            case 6:\n              queryParams.key = API_KEY;\n              url = 'https://maps.google.com/maps/api/geocode/json?' + toQueryParams(queryParams);\n              _context.prev = 8;\n              _context.next = 11;\n              return _regenerator.default.awrap(fetch(url));\n\n            case 11:\n              response = _context.sent;\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](8);\n              throw {\n                code: Geocoder.Errors.FETCHING,\n                message: \"Error while fetching. Check your network.\",\n                origin: _context.t0\n              };\n\n            case 17:\n              _context.prev = 17;\n              _context.next = 20;\n              return _regenerator.default.awrap(response.json());\n\n            case 20:\n              data = _context.sent;\n              _context.next = 26;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              _context.t1 = _context[\"catch\"](17);\n              throw {\n                code: Geocoder.Errors.PARSING,\n                message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n                origin: response\n              };\n\n            case 26:\n              if (!(data.status !== 'OK')) {\n                _context.next = 28;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.SERVER,\n                message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n                origin: data\n              };\n\n            case 28:\n              return _context.abrupt(\"return\", data);\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[8, 14], [17, 23]]);\n    },\n    getFromLocation: function getFromLocation(address) {\n      return this.from(address);\n    },\n    getFromLatLng: function getFromLatLng(lat, lng) {\n      return this.from(lat, lng);\n    },\n    Errors: {\n      NOT_INITIATED: 0,\n      INVALID_PARAMETERS: 1,\n      FETCHING: 2,\n      PARSING: 3,\n      SERVER: 4\n    }\n  };\n\n  exports.default = _default;\n\n  function toQueryParams(object) {\n    return Object.keys(object).filter(function (key) {\n      return !!object[key];\n    }).map(function (key) {\n      return key + \"=\" + encodeURIComponent(object[key]);\n    }).join(\"&\");\n  }\n});","map":[[11,0,1,0],[11,6,1,4,"API_KEY"],[11,13,1,0],[12,0,6,0],[12,6,6,4,"Geocoder"],[12,14,6,0],[14,17,7,15,"Geocoder"],[14,25,7,23],[14,28,7,26],[15,0,13,1,"init"],[15,4,13,1,"init"],[15,8,7,26],[15,24,13,6,"apiKey"],[15,30,7,26],[15,32,13,13],[16,0,14,2,"API_KEY"],[16,6,14,2,"API_KEY"],[16,13,14,9],[16,16,14,12,"apiKey"],[16,22,14,2],[17,0,15,2],[17,5,7,26],[19,0,20,1],[19,8,20,5,"isInit"],[19,14,20,1],[19,17,20,13],[20,0,21,2],[20,13,21,9],[20,14,21,10],[20,15,21,12,"API_KEY"],[20,22,21,2],[21,0,22,2],[21,5,7,26],[23,0,28,1,"setApiKey"],[23,4,28,1,"setApiKey"],[23,13,7,26],[23,34,28,11,"API_KEY"],[23,41,7,26],[23,43,28,20],[24,0,29,2],[24,11,29,7,"init"],[24,15,29,2],[24,16,29,12,"API_KEY"],[24,23,29,2],[25,0,30,2],[25,5,7,26],[26,0,45,7,"from"],[26,4,45,7,"from"],[26,8,7,26],[27,0,7,26],[28,0,7,26],[29,0,7,26],[30,0,7,26],[31,0,7,26],[32,0,7,26],[33,0,7,26],[34,0,7,26],[36,0,7,26],[37,0,7,26],[38,0,7,26],[39,0,7,26],[40,0,7,26],[40,18,47,7,"Geocoder"],[40,26,47,15],[40,27,47,16,"isInit"],[40,33,7,26],[41,0,7,26],[42,0,7,26],[43,0,7,26],[45,0,7,26],[45,20,48,9],[46,0,49,4,"code"],[46,16,49,4,"code"],[46,20,49,8],[46,22,49,11,"Geocoder"],[46,30,49,19],[46,31,49,20,"Errors"],[46,37,49,11],[46,38,49,27,"NOT_INITIATED"],[46,51,48,9],[47,0,50,4,"message"],[47,16,50,4,"message"],[47,23,50,11],[47,25,50,14],[48,0,48,9],[48,15,7,26],[50,0,7,26],[51,0,7,26],[51,40,45,15,"params"],[51,46,7,26],[52,0,45,15,"params"],[52,16,45,15,"params"],[52,22,7,26],[53,0,7,26],[55,0,57,2],[55,18,57,6],[55,19,57,7,"isNaN"],[55,24,57,12],[55,25,57,13,"params"],[55,31,57,19],[55,32,57,20],[55,33,57,19],[55,34,57,12],[55,35,57,6],[55,39,57,27],[55,40,57,28,"isNaN"],[55,45,57,33],[55,46,57,34,"params"],[55,52,57,40],[55,53,57,41],[55,54,57,40],[55,55,57,33],[55,56,57,2],[55,58,58,3,"queryParams"],[55,69,58,14],[55,72,58,17],[56,0,58,18,"latlng"],[56,16,58,18,"latlng"],[56,22,58,24],[56,24,58,30,"params"],[56,30,58,36],[56,31,58,37],[56,32,58,36],[56,33,58,24],[56,42,58,43,"params"],[56,48,58,49],[56,49,58,50],[56,50,58,49],[57,0,58,17],[57,15,58,3],[57,16,57,2],[57,21,61,7],[57,25,61,11,"params"],[57,31,61,17],[57,32,61,18],[57,33,61,17],[57,34,61,11],[57,46,61,32,"Array"],[57,51,61,7],[57,53,62,3,"queryParams"],[57,64,62,14],[57,67,62,17],[58,0,62,18,"latlng"],[58,18,62,18,"latlng"],[58,24,62,24],[58,26,62,30,"params"],[58,32,62,36],[58,33,62,37],[58,34,62,36],[58,35,62,30],[58,36,62,40],[58,37,62,30],[58,38,62,24],[58,47,62,46,"params"],[58,53,62,52],[58,54,62,53],[58,55,62,52],[58,56,62,46],[58,57,62,56],[58,58,62,46],[59,0,62,17],[59,17,62,3],[59,18,61,7],[59,23,65,7],[59,27,65,11,"params"],[59,33,65,17],[59,34,65,18],[59,35,65,17],[59,36,65,11],[59,48,65,32,"Object"],[59,54,65,7],[59,56,66,3,"queryParams"],[59,67,66,14],[59,70,66,17],[60,0,66,18,"latlng"],[60,20,66,18,"latlng"],[60,26,66,24],[60,29,66,30,"params"],[60,35,66,36],[60,36,66,37],[60,37,66,36],[60,38,66,30],[60,39,66,40,"lat"],[60,42,66,30],[60,46,66,47,"params"],[60,52,66,53],[60,53,66,54],[60,54,66,53],[60,55,66,47],[60,56,66,57,"latitude"],[60,64,66,24],[60,75,66,69,"params"],[60,81,66,75],[60,82,66,76],[60,83,66,75],[60,84,66,69],[60,85,66,79,"lng"],[60,88,66,69],[60,92,66,86,"params"],[60,98,66,92],[60,99,66,93],[60,100,66,92],[60,101,66,86],[60,102,66,96,"longitude"],[60,111,66,24],[61,0,66,17],[61,19,66,3],[61,20,65,7],[61,25,69,7],[61,29,69,11],[61,36,69,18,"params"],[61,42,69,24],[61,43,69,25],[61,44,69,24],[61,45,69,11],[61,50,69,32],[61,58,69,7],[61,60,70,3,"queryParams"],[61,71,70,14],[61,74,70,17],[62,0,70,18,"address"],[62,22,70,18,"address"],[62,29,70,25],[62,31,70,28,"params"],[62,37,70,34],[62,38,70,35],[62,39,70,34],[63,0,70,17],[63,21,70,3],[65,0,7,26],[65,18,76,7,"queryParams"],[65,29,7,26],[66,0,7,26],[67,0,7,26],[68,0,7,26],[70,0,7,26],[70,20,78,9],[71,0,79,4,"code"],[71,16,79,4,"code"],[71,20,79,8],[71,22,79,11,"Geocoder"],[71,30,79,19],[71,31,79,20,"Errors"],[71,37,79,11],[71,38,79,27,"INVALID_PARAMETERS"],[71,56,78,9],[72,0,80,4,"message"],[72,16,80,4,"message"],[72,23,80,11],[72,25,80,14],[72,53,80,42,"JSON"],[72,57,80,46],[72,58,80,47,"stringify"],[72,67,80,42],[72,68,80,57,"params"],[72,74,80,42],[72,76,80,65],[72,80,80,42],[72,82,80,71],[72,83,80,42],[73,0,78,9],[73,15,7,26],[75,0,7,26],[76,0,83,2,"queryParams"],[76,14,83,2,"queryParams"],[76,25,83,13],[76,26,83,14,"key"],[76,29,83,2],[76,32,83,20,"API_KEY"],[76,39,83,2],[77,0,86,8,"url"],[77,14,86,8,"url"],[77,17,7,26],[77,20,86,14],[77,71,86,65,"toQueryParams"],[77,84,86,78],[77,85,86,79,"queryParams"],[77,96,86,78],[77,97,7,26],[78,0,7,26],[79,0,7,26],[80,0,7,26],[80,48,92,20,"fetch"],[80,53,92,25],[80,54,92,26,"url"],[80,57,92,25],[80,58,7,26],[82,0,7,26],[83,0,92,3,"response"],[83,14,92,3,"response"],[83,22,7,26],[84,0,7,26],[85,0,7,26],[87,0,7,26],[88,0,7,26],[89,0,7,26],[90,0,7,26],[90,20,94,9],[91,0,95,4,"code"],[91,16,95,4,"code"],[91,20,95,8],[91,22,95,11,"Geocoder"],[91,30,95,19],[91,31,95,20,"Errors"],[91,37,95,11],[91,38,95,27,"FETCHING"],[91,46,94,9],[92,0,96,4,"message"],[92,16,96,4,"message"],[92,23,96,11],[92,25,96,14],[92,68,94,9],[93,0,97,4,"origin"],[93,16,97,4,"origin"],[93,22,97,10],[94,0,94,9],[94,15,7,26],[96,0,7,26],[97,0,7,26],[98,0,7,26],[99,0,7,26],[99,48,103,16,"response"],[99,56,103,24],[99,57,103,25,"json"],[99,61,103,16],[99,63,7,26],[101,0,7,26],[102,0,103,3,"data"],[102,14,103,3,"data"],[102,18,7,26],[103,0,7,26],[104,0,7,26],[106,0,7,26],[107,0,7,26],[108,0,7,26],[109,0,7,26],[109,20,105,9],[110,0,106,4,"code"],[110,16,106,4,"code"],[110,20,106,8],[110,22,106,11,"Geocoder"],[110,30,106,19],[110,31,106,20,"Errors"],[110,37,106,11],[110,38,106,27,"PARSING"],[110,45,105,9],[111,0,107,4,"message"],[111,16,107,4,"message"],[111,23,107,11],[111,25,107,14],[111,146,105,9],[112,0,108,4,"origin"],[112,16,108,4,"origin"],[112,22,108,10],[112,24,108,13,"response"],[113,0,105,9],[113,15,7,26],[115,0,7,26],[116,0,7,26],[116,20,113,6,"data"],[116,24,113,10],[116,25,113,11,"status"],[116,31,113,6],[116,36,113,22],[116,40,7,26],[117,0,7,26],[118,0,7,26],[119,0,7,26],[121,0,7,26],[121,20,114,9],[122,0,115,4,"code"],[122,16,115,4,"code"],[122,20,115,8],[122,22,115,11,"Geocoder"],[122,30,115,19],[122,31,115,20,"Errors"],[122,37,115,11],[122,38,115,27,"SERVER"],[122,44,114,9],[123,0,116,4,"message"],[123,16,116,4,"message"],[123,23,116,11],[123,25,116,14],[123,151,114,9],[124,0,117,4,"origin"],[124,16,117,4,"origin"],[124,22,117,10],[124,24,117,13,"data"],[125,0,114,9],[125,15,7,26],[127,0,7,26],[128,0,7,26],[128,47,120,9,"data"],[128,51,7,26],[130,0,7,26],[131,0,7,26],[132,0,7,26],[133,0,7,26],[134,0,7,26],[135,0,7,26],[136,0,7,26],[137,0,131,1,"getFromLocation"],[137,4,131,1,"getFromLocation"],[137,19,7,26],[137,46,131,17,"address"],[137,53,7,26],[137,55,131,26],[138,0,132,2],[138,13,132,9],[138,18,132,14,"from"],[138,22,132,9],[138,23,132,19,"address"],[138,30,132,9],[138,31,132,2],[139,0,133,2],[139,5,7,26],[140,0,144,1,"getFromLatLng"],[140,4,144,1,"getFromLatLng"],[140,17,7,26],[140,42,144,15,"lat"],[140,45,7,26],[140,47,144,20,"lng"],[140,50,7,26],[140,52,144,24],[141,0,145,2],[141,13,145,9],[141,18,145,14,"from"],[141,22,145,9],[141,23,145,19,"lat"],[141,26,145,9],[141,28,145,24,"lng"],[141,31,145,9],[141,32,145,2],[142,0,146,2],[142,5,7,26],[143,0,151,1,"Errors"],[143,4,151,1,"Errors"],[143,10,151,7],[143,12,151,10],[144,0,155,2,"NOT_INITIATED"],[144,6,155,2,"NOT_INITIATED"],[144,19,155,15],[144,21,155,18],[144,22,151,10],[145,0,160,2,"INVALID_PARAMETERS"],[145,6,160,2,"INVALID_PARAMETERS"],[145,24,160,20],[145,26,160,23],[145,27,151,10],[146,0,166,2,"FETCHING"],[146,6,166,2,"FETCHING"],[146,14,166,10],[146,16,166,13],[146,17,151,10],[147,0,172,2,"PARSING"],[147,6,172,2,"PARSING"],[147,13,172,9],[147,15,172,12],[147,16,151,10],[148,0,178,2,"SERVER"],[148,6,178,2,"SERVER"],[148,12,178,8],[148,14,178,11],[149,0,151,10],[150,0,7,26],[150,3],[154,0,187,0],[154,11,187,9,"toQueryParams"],[154,24,187,0],[154,25,187,23,"object"],[154,31,187,0],[154,33,187,30],[155,0,188,1],[155,11,188,8,"Object"],[155,17,188,14],[155,18,188,15,"keys"],[155,22,188,8],[155,23,188,20,"object"],[155,29,188,8],[155,31,189,3,"filter"],[155,37,188,8],[155,38,189,10],[155,48,189,10,"key"],[155,51,189,13],[156,0,189,13],[156,13,189,17],[156,14,189,18],[156,15,189,19,"object"],[156,21,189,25],[156,22,189,26,"key"],[156,25,189,25],[156,26,189,13],[157,0,189,13],[157,5,188,8],[157,7,190,3,"map"],[157,10,188,8],[157,11,190,7],[157,21,190,7,"key"],[157,24,190,10],[158,0,190,10],[158,13,190,14,"key"],[158,16,190,17],[158,19,190,20],[158,22,190,14],[158,25,190,26,"encodeURIComponent"],[158,43,190,44],[158,44,190,45,"object"],[158,50,190,51],[158,51,190,52,"key"],[158,54,190,51],[158,55,190,44],[158,56,190,10],[159,0,190,10],[159,5,188,8],[159,7,191,3,"join"],[159,11,188,8],[159,12,191,8],[159,15,188,8],[159,16,188,1],[160,0,192,1]]},"type":"js/module"}]}