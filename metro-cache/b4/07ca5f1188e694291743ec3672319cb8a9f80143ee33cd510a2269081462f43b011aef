{"dependencies":[{"name":"buffer","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Buffer = _$$_REQUIRE(_dependencyMap[0], \"buffer\").Buffer;\n\n  var intSize = 4;\n  var zeroBuffer = new Buffer(intSize);\n  zeroBuffer.fill(0);\n  var chrsz = 8;\n\n  function toArray(buf, bigEndian) {\n    if (buf.length % intSize !== 0) {\n      var len = buf.length + (intSize - buf.length % intSize);\n      buf = Buffer.concat([buf, zeroBuffer], len);\n    }\n\n    var arr = [];\n    var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n\n    for (var i = 0; i < buf.length; i += intSize) {\n      arr.push(fn.call(buf, i));\n    }\n\n    return arr;\n  }\n\n  function toBuffer(arr, size, bigEndian) {\n    var buf = new Buffer(size);\n    var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n\n    for (var i = 0; i < arr.length; i++) {\n      fn.call(buf, arr[i], i * 4, true);\n    }\n\n    return buf;\n  }\n\n  function hash(buf, fn, hashSize, bigEndian) {\n    if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n    var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n    return toBuffer(arr, hashSize, bigEndian);\n  }\n\n  module.exports = {\n    hash: hash\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"Buffer"],[2,12,1,10],[2,15,1,13,"require"],[2,26,1,20],[2,55,1,13],[2,56,1,31,"Buffer"],[2,62,1,0],[4,0,2,0],[4,6,2,4,"intSize"],[4,13,2,11],[4,16,2,14],[4,17,2,0],[5,0,3,0],[5,6,3,4,"zeroBuffer"],[5,16,3,14],[5,19,3,17],[5,23,3,21,"Buffer"],[5,29,3,17],[5,30,3,28,"intSize"],[5,37,3,17],[5,38,3,0],[6,0,3,38,"zeroBuffer"],[6,2,3,38,"zeroBuffer"],[6,12,3,48],[6,13,3,49,"fill"],[6,17,3,38],[6,18,3,54],[6,19,3,38],[7,0,4,0],[7,6,4,4,"chrsz"],[7,11,4,9],[7,14,4,12],[7,15,4,0],[9,0,6,0],[9,11,6,9,"toArray"],[9,18,6,0],[9,19,6,17,"buf"],[9,22,6,0],[9,24,6,22,"bigEndian"],[9,33,6,0],[9,35,6,33],[10,0,7,2],[10,8,7,7,"buf"],[10,11,7,10],[10,12,7,11,"length"],[10,18,7,7],[10,21,7,20,"intSize"],[10,28,7,6],[10,33,7,33],[10,34,7,2],[10,36,7,36],[11,0,8,4],[11,10,8,8,"len"],[11,13,8,11],[11,16,8,14,"buf"],[11,19,8,17],[11,20,8,18,"length"],[11,26,8,14],[11,30,8,28,"intSize"],[11,37,8,35],[11,40,8,39,"buf"],[11,43,8,42],[11,44,8,43,"length"],[11,50,8,39],[11,53,8,52,"intSize"],[11,60,8,14],[11,61,8,4],[12,0,9,4,"buf"],[12,6,9,4,"buf"],[12,9,9,7],[12,12,9,10,"Buffer"],[12,18,9,16],[12,19,9,17,"concat"],[12,25,9,10],[12,26,9,24],[12,27,9,25,"buf"],[12,30,9,24],[12,32,9,30,"zeroBuffer"],[12,42,9,24],[12,43,9,10],[12,45,9,43,"len"],[12,48,9,10],[12,49,9,4],[13,0,10,3],[15,0,12,2],[15,8,12,6,"arr"],[15,11,12,9],[15,14,12,12],[15,16,12,2],[16,0,13,2],[16,8,13,6,"fn"],[16,10,13,8],[16,13,13,11,"bigEndian"],[16,22,13,20],[16,25,13,23,"buf"],[16,28,13,26],[16,29,13,27,"readInt32BE"],[16,40,13,20],[16,43,13,41,"buf"],[16,46,13,44],[16,47,13,45,"readInt32LE"],[16,58,13,2],[18,0,14,2],[18,9,14,7],[18,13,14,11,"i"],[18,14,14,12],[18,17,14,15],[18,18,14,2],[18,20,14,18,"i"],[18,21,14,19],[18,24,14,22,"buf"],[18,27,14,25],[18,28,14,26,"length"],[18,34,14,2],[18,36,14,34,"i"],[18,37,14,35],[18,41,14,39,"intSize"],[18,48,14,2],[18,50,14,48],[19,0,15,4,"arr"],[19,6,15,4,"arr"],[19,9,15,7],[19,10,15,8,"push"],[19,14,15,4],[19,15,15,13,"fn"],[19,17,15,15],[19,18,15,16,"call"],[19,22,15,13],[19,23,15,21,"buf"],[19,26,15,13],[19,28,15,26,"i"],[19,29,15,13],[19,30,15,4],[20,0,16,3],[22,0,17,2],[22,11,17,9,"arr"],[22,14,17,2],[23,0,18,1],[25,0,20,0],[25,11,20,9,"toBuffer"],[25,19,20,0],[25,20,20,18,"arr"],[25,23,20,0],[25,25,20,23,"size"],[25,29,20,0],[25,31,20,29,"bigEndian"],[25,40,20,0],[25,42,20,40],[26,0,21,2],[26,8,21,6,"buf"],[26,11,21,9],[26,14,21,12],[26,18,21,16,"Buffer"],[26,24,21,12],[26,25,21,23,"size"],[26,29,21,12],[26,30,21,2],[27,0,22,2],[27,8,22,6,"fn"],[27,10,22,8],[27,13,22,11,"bigEndian"],[27,22,22,20],[27,25,22,23,"buf"],[27,28,22,26],[27,29,22,27,"writeInt32BE"],[27,41,22,20],[27,44,22,42,"buf"],[27,47,22,45],[27,48,22,46,"writeInt32LE"],[27,60,22,2],[29,0,23,2],[29,9,23,7],[29,13,23,11,"i"],[29,14,23,12],[29,17,23,15],[29,18,23,2],[29,20,23,18,"i"],[29,21,23,19],[29,24,23,22,"arr"],[29,27,23,25],[29,28,23,26,"length"],[29,34,23,2],[29,36,23,34,"i"],[29,37,23,35],[29,39,23,2],[29,41,23,39],[30,0,24,4,"fn"],[30,6,24,4,"fn"],[30,8,24,6],[30,9,24,7,"call"],[30,13,24,4],[30,14,24,12,"buf"],[30,17,24,4],[30,19,24,17,"arr"],[30,22,24,20],[30,23,24,21,"i"],[30,24,24,20],[30,25,24,4],[30,27,24,25,"i"],[30,28,24,26],[30,31,24,29],[30,32,24,4],[30,34,24,32],[30,38,24,4],[31,0,25,3],[33,0,26,2],[33,11,26,9,"buf"],[33,14,26,2],[34,0,27,1],[36,0,29,0],[36,11,29,9,"hash"],[36,15,29,0],[36,16,29,14,"buf"],[36,19,29,0],[36,21,29,19,"fn"],[36,23,29,0],[36,25,29,23,"hashSize"],[36,33,29,0],[36,35,29,33,"bigEndian"],[36,44,29,0],[36,46,29,44],[37,0,30,2],[37,8,30,6],[37,9,30,7,"Buffer"],[37,15,30,13],[37,16,30,14,"isBuffer"],[37,24,30,7],[37,25,30,23,"buf"],[37,28,30,7],[37,29,30,2],[37,31,30,29,"buf"],[37,34,30,32],[37,37,30,35],[37,41,30,39,"Buffer"],[37,47,30,35],[37,48,30,46,"buf"],[37,51,30,35],[37,52,30,29],[38,0,31,2],[38,8,31,6,"arr"],[38,11,31,9],[38,14,31,12,"fn"],[38,16,31,14],[38,17,31,15,"toArray"],[38,24,31,22],[38,25,31,23,"buf"],[38,28,31,22],[38,30,31,28,"bigEndian"],[38,39,31,22],[38,40,31,14],[38,42,31,40,"buf"],[38,45,31,43],[38,46,31,44,"length"],[38,52,31,40],[38,55,31,53,"chrsz"],[38,60,31,14],[38,61,31,2],[39,0,32,2],[39,11,32,9,"toBuffer"],[39,19,32,17],[39,20,32,18,"arr"],[39,23,32,17],[39,25,32,23,"hashSize"],[39,33,32,17],[39,35,32,33,"bigEndian"],[39,44,32,17],[39,45,32,2],[40,0,33,1],[42,0,35,0,"module"],[42,2,35,0,"module"],[42,8,35,6],[42,9,35,7,"exports"],[42,16,35,0],[42,19,35,17],[43,0,35,19,"hash"],[43,4,35,19,"hash"],[43,8,35,23],[43,10,35,25,"hash"],[44,0,35,17],[44,3,35,0]]},"type":"js/module"}]}