{"dependencies":[{"name":"../core","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var util = _$$_REQUIRE(_dependencyMap[0], \"../core\").util;\n\n  function typeOf(data) {\n    if (data === null && typeof data === 'object') {\n      return 'null';\n    } else if (data !== undefined && isBinary(data)) {\n      return 'Binary';\n    } else if (data !== undefined && data.constructor) {\n      return util.typeName(data.constructor);\n    } else if (data !== undefined && typeof data === 'object') {\n      return 'Object';\n    } else {\n      return 'undefined';\n    }\n  }\n\n  function isBinary(data) {\n    var types = ['Buffer', 'File', 'Blob', 'ArrayBuffer', 'DataView', 'Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array'];\n\n    if (util.isNode()) {\n      var Stream = util.stream.Stream;\n\n      if (util.Buffer.isBuffer(data) || data instanceof Stream) {\n        return true;\n      }\n    }\n\n    for (var i = 0; i < types.length; i++) {\n      if (data !== undefined && data.constructor) {\n        if (util.isType(data, types[i])) return true;\n        if (util.typeName(data.constructor) === types[i]) return true;\n      }\n    }\n\n    return false;\n  }\n\n  module.exports = {\n    typeOf: typeOf,\n    isBinary: isBinary\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"util"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,54,1,11],[2,55,1,30,"util"],[2,59,1,0],[4,0,3,0],[4,11,3,9,"typeOf"],[4,17,3,0],[4,18,3,16,"data"],[4,22,3,0],[4,24,3,22],[5,0,4,2],[5,8,4,6,"data"],[5,12,4,10],[5,17,4,15],[5,21,4,6],[5,25,4,23],[5,32,4,30,"data"],[5,36,4,23],[5,41,4,39],[5,49,4,2],[5,51,4,49],[6,0,5,4],[6,13,5,11],[6,19,5,4],[7,0,6,3],[7,5,4,2],[7,11,6,9],[7,15,6,13,"data"],[7,19,6,17],[7,24,6,22,"undefined"],[7,33,6,13],[7,37,6,35,"isBinary"],[7,45,6,43],[7,46,6,44,"data"],[7,50,6,43],[7,51,6,9],[7,53,6,51],[8,0,7,4],[8,13,7,11],[8,21,7,4],[9,0,8,3],[9,5,6,9],[9,11,8,9],[9,15,8,13,"data"],[9,19,8,17],[9,24,8,22,"undefined"],[9,33,8,13],[9,37,8,35,"data"],[9,41,8,39],[9,42,8,40,"constructor"],[9,53,8,9],[9,55,8,53],[10,0,9,4],[10,13,9,11,"util"],[10,17,9,15],[10,18,9,16,"typeName"],[10,26,9,11],[10,27,9,25,"data"],[10,31,9,29],[10,32,9,30,"constructor"],[10,43,9,11],[10,44,9,4],[11,0,10,3],[11,5,8,9],[11,11,10,9],[11,15,10,13,"data"],[11,19,10,17],[11,24,10,22,"undefined"],[11,33,10,13],[11,37,10,35],[11,44,10,42,"data"],[11,48,10,35],[11,53,10,51],[11,61,10,9],[11,63,10,61],[12,0,13,4],[12,13,13,11],[12,21,13,4],[13,0,14,3],[13,5,10,9],[13,11,14,9],[14,0,15,4],[14,13,15,11],[14,24,15,4],[15,0,16,3],[16,0,17,1],[18,0,19,0],[18,11,19,9,"isBinary"],[18,19,19,0],[18,20,19,18,"data"],[18,24,19,0],[18,26,19,24],[19,0,20,2],[19,8,20,6,"types"],[19,13,20,11],[19,16,20,14],[19,17,21,4],[19,25,20,14],[19,27,21,14],[19,33,20,14],[19,35,21,22],[19,41,20,14],[19,43,21,30],[19,56,20,14],[19,58,21,45],[19,68,20,14],[19,70,22,4],[19,81,20,14],[19,83,22,17],[19,95,20,14],[19,97,22,31],[19,116,20,14],[19,118,23,4],[19,130,20,14],[19,132,23,18],[19,145,20,14],[19,147,23,33],[19,159,20,14],[19,161,23,47],[19,174,20,14],[19,176,24,4],[19,190,20,14],[19,192,24,20],[19,206,20,14],[19,207,20,2],[21,0,26,2],[21,8,26,6,"util"],[21,12,26,10],[21,13,26,11,"isNode"],[21,19,26,6],[21,21,26,2],[21,23,26,21],[22,0,27,4],[22,10,27,8,"Stream"],[22,16,27,14],[22,19,27,17,"util"],[22,23,27,21],[22,24,27,22,"stream"],[22,30,27,17],[22,31,27,29,"Stream"],[22,37,27,4],[24,0,28,4],[24,10,28,8,"util"],[24,14,28,12],[24,15,28,13,"Buffer"],[24,21,28,8],[24,22,28,20,"isBuffer"],[24,30,28,8],[24,31,28,29,"data"],[24,35,28,8],[24,40,28,38,"data"],[24,44,28,42],[24,56,28,54,"Stream"],[24,62,28,4],[24,64,28,62],[25,0,29,6],[25,15,29,13],[25,19,29,6],[26,0,30,5],[27,0,31,3],[29,0,33,2],[29,9,33,7],[29,13,33,11,"i"],[29,14,33,12],[29,17,33,15],[29,18,33,2],[29,20,33,18,"i"],[29,21,33,19],[29,24,33,22,"types"],[29,29,33,27],[29,30,33,28,"length"],[29,36,33,2],[29,38,33,36,"i"],[29,39,33,37],[29,41,33,2],[29,43,33,41],[30,0,34,4],[30,10,34,8,"data"],[30,14,34,12],[30,19,34,17,"undefined"],[30,28,34,8],[30,32,34,30,"data"],[30,36,34,34],[30,37,34,35,"constructor"],[30,48,34,4],[30,50,34,48],[31,0,35,6],[31,12,35,10,"util"],[31,16,35,14],[31,17,35,15,"isType"],[31,23,35,10],[31,24,35,22,"data"],[31,28,35,10],[31,30,35,28,"types"],[31,35,35,33],[31,36,35,34,"i"],[31,37,35,33],[31,38,35,10],[31,39,35,6],[31,41,35,39],[31,48,35,46],[31,52,35,39],[32,0,36,6],[32,12,36,10,"util"],[32,16,36,14],[32,17,36,15,"typeName"],[32,25,36,10],[32,26,36,24,"data"],[32,30,36,28],[32,31,36,29,"constructor"],[32,42,36,10],[32,48,36,46,"types"],[32,53,36,51],[32,54,36,52,"i"],[32,55,36,51],[32,56,36,6],[32,58,36,56],[32,65,36,63],[32,69,36,56],[33,0,37,5],[34,0,38,3],[36,0,40,2],[36,11,40,9],[36,16,40,2],[37,0,41,1],[39,0,43,0,"module"],[39,2,43,0,"module"],[39,8,43,6],[39,9,43,7,"exports"],[39,16,43,0],[39,19,43,17],[40,0,44,2,"typeOf"],[40,4,44,2,"typeOf"],[40,10,44,8],[40,12,44,10,"typeOf"],[40,18,43,17],[41,0,45,2,"isBinary"],[41,4,45,2,"isBinary"],[41,12,45,10],[41,14,45,12,"isBinary"],[42,0,43,17],[42,3,43,0]]},"type":"js/module"}]}