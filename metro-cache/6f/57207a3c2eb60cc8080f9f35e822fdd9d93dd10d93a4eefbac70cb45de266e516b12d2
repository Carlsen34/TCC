{"dependencies":[{"name":"../core","data":{"isAsync":false}},{"name":"./to-buffer","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var util = _$$_REQUIRE(_dependencyMap[0], \"../core\").util;\n\n  var toBuffer = _$$_REQUIRE(_dependencyMap[1], \"./to-buffer\").toBuffer;\n\n  function Int64(bytes) {\n    if (bytes.length !== 8) {\n      throw new Error('Int64 buffers must be exactly 8 bytes');\n    }\n\n    if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);\n    this.bytes = bytes;\n  }\n\n  Int64.fromNumber = function (number) {\n    if (number > 9223372036854775807 || number < -9223372036854775808) {\n      throw new Error(number + ' is too large (or, if negative, too small) to represent as an Int64');\n    }\n\n    var bytes = new Uint8Array(8);\n\n    for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n\n    if (number < 0) {\n      negate(bytes);\n    }\n\n    return new Int64(bytes);\n  };\n\n  Int64.prototype.valueOf = function () {\n    var bytes = this.bytes.slice(0);\n    var negative = bytes[0] & 128;\n\n    if (negative) {\n      negate(bytes);\n    }\n\n    return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);\n  };\n\n  Int64.prototype.toString = function () {\n    return String(this.valueOf());\n  };\n\n  function negate(bytes) {\n    for (var i = 0; i < 8; i++) {\n      bytes[i] ^= 0xFF;\n    }\n\n    for (var i = 7; i > -1; i--) {\n      bytes[i]++;\n\n      if (bytes[i] !== 0) {\n        break;\n      }\n    }\n  }\n\n  module.exports = {\n    Int64: Int64\n  };\n});","map":[[2,0,1,0],[2,6,1,4,"util"],[2,10,1,8],[2,13,1,11,"require"],[2,24,1,18],[2,54,1,11],[2,55,1,30,"util"],[2,59,1,0],[4,0,2,0],[4,6,2,4,"toBuffer"],[4,14,2,12],[4,17,2,15,"require"],[4,28,2,22],[4,62,2,15],[4,63,2,38,"toBuffer"],[4,71,2,0],[6,0,14,0],[6,11,14,9,"Int64"],[6,16,14,0],[6,17,14,15,"bytes"],[6,22,14,0],[6,24,14,22],[7,0,15,4],[7,8,15,8,"bytes"],[7,13,15,13],[7,14,15,14,"length"],[7,20,15,8],[7,25,15,25],[7,26,15,4],[7,28,15,28],[8,0,16,8],[8,12,16,14],[8,16,16,18,"Error"],[8,21,16,14],[8,22,16,24],[8,61,16,14],[8,62,16,8],[9,0,17,5],[11,0,18,4],[11,8,18,8],[11,9,18,9,"util"],[11,13,18,13],[11,14,18,14,"Buffer"],[11,20,18,9],[11,21,18,21,"isBuffer"],[11,29,18,9],[11,30,18,30,"bytes"],[11,35,18,9],[11,36,18,4],[11,38,18,38,"bytes"],[11,43,18,43],[11,46,18,46,"toBuffer"],[11,54,18,54],[11,55,18,55,"bytes"],[11,60,18,54],[11,61,18,38],[12,0,20,4],[12,9,20,9,"bytes"],[12,14,20,4],[12,17,20,17,"bytes"],[12,22,20,4],[13,0,21,1],[15,0,29,0,"Int64"],[15,2,29,0,"Int64"],[15,7,29,5],[15,8,29,6,"fromNumber"],[15,18,29,0],[15,21,29,19],[15,31,29,28,"number"],[15,37,29,19],[15,39,29,36],[16,0,30,4],[16,8,30,8,"number"],[16,14,30,14],[16,17,30,17],[16,36,30,8],[16,40,30,40,"number"],[16,46,30,46],[16,49,30,49],[16,50,30,50],[16,69,30,4],[16,71,30,71],[17,0,31,8],[17,12,31,14],[17,16,31,18,"Error"],[17,21,31,14],[17,22,32,12,"number"],[17,28,32,18],[17,31,32,21],[17,100,31,14],[17,101,31,8],[18,0,34,5],[20,0,36,4],[20,8,36,8,"bytes"],[20,13,36,13],[20,16,36,16],[20,20,36,20,"Uint8Array"],[20,30,36,16],[20,31,36,31],[20,32,36,16],[20,33,36,4],[22,0,37,4],[22,9,38,8],[22,13,38,12,"i"],[22,14,38,13],[22,17,38,16],[22,18,38,8],[22,20,38,19,"remaining"],[22,29,38,28],[22,32,38,31,"Math"],[22,36,38,35],[22,37,38,36,"abs"],[22,40,38,31],[22,41,38,40,"Math"],[22,45,38,44],[22,46,38,45,"round"],[22,51,38,40],[22,52,38,51,"number"],[22,58,38,40],[22,59,38,31],[22,60,37,4],[22,62,39,8,"i"],[22,63,39,9],[22,66,39,12],[22,67,39,13],[22,68,39,8],[22,72,39,18,"remaining"],[22,81,39,27],[22,84,39,30],[22,85,37,4],[22,87,40,8,"i"],[22,88,40,9],[22,92,40,13,"remaining"],[22,101,40,22],[22,105,40,26],[22,108,37,4],[22,110,41,6],[23,0,42,8,"bytes"],[23,6,42,8,"bytes"],[23,11,42,13],[23,12,42,14,"i"],[23,13,42,13],[23,14,42,8],[23,17,42,19,"remaining"],[23,26,42,8],[24,0,43,5],[26,0,45,4],[26,8,45,8,"number"],[26,14,45,14],[26,17,45,17],[26,18,45,4],[26,20,45,20],[27,0,46,8,"negate"],[27,6,46,8,"negate"],[27,12,46,14],[27,13,46,15,"bytes"],[27,18,46,14],[27,19,46,8],[28,0,47,5],[30,0,49,4],[30,11,49,11],[30,15,49,15,"Int64"],[30,20,49,11],[30,21,49,21,"bytes"],[30,26,49,11],[30,27,49,4],[31,0,50,1],[31,3,29,0],[33,0,57,0,"Int64"],[33,2,57,0,"Int64"],[33,7,57,5],[33,8,57,6,"prototype"],[33,17,57,0],[33,18,57,16,"valueOf"],[33,25,57,0],[33,28,57,26],[33,40,57,37],[34,0,58,4],[34,8,58,8,"bytes"],[34,13,58,13],[34,16,58,16],[34,21,58,21,"bytes"],[34,26,58,16],[34,27,58,27,"slice"],[34,32,58,16],[34,33,58,33],[34,34,58,16],[34,35,58,4],[35,0,59,4],[35,8,59,8,"negative"],[35,16,59,16],[35,19,59,19,"bytes"],[35,24,59,24],[35,25,59,25],[35,26,59,24],[35,27,59,19],[35,30,59,30],[35,33,59,4],[37,0,60,4],[37,8,60,8,"negative"],[37,16,60,4],[37,18,60,18],[38,0,61,8,"negate"],[38,6,61,8,"negate"],[38,12,61,14],[38,13,61,15,"bytes"],[38,18,61,14],[38,19,61,8],[39,0,62,5],[41,0,64,4],[41,11,64,11,"parseInt"],[41,19,64,19],[41,20,64,20,"bytes"],[41,25,64,25],[41,26,64,26,"toString"],[41,34,64,20],[41,35,64,35],[41,40,64,20],[41,41,64,19],[41,43,64,43],[41,45,64,19],[41,46,64,11],[41,50,64,50,"negative"],[41,58,64,58],[41,61,64,61],[41,62,64,62],[41,63,64,58],[41,66,64,66],[41,67,64,11],[41,68,64,4],[42,0,65,1],[42,3,57,0],[44,0,67,0,"Int64"],[44,2,67,0,"Int64"],[44,7,67,5],[44,8,67,6,"prototype"],[44,17,67,0],[44,18,67,16,"toString"],[44,26,67,0],[44,29,67,27],[44,41,67,38],[45,0,68,4],[45,11,68,11,"String"],[45,17,68,17],[45,18,68,18],[45,23,68,23,"valueOf"],[45,30,68,18],[45,32,68,17],[45,33,68,4],[46,0,69,1],[46,3,67,0],[48,0,76,0],[48,11,76,9,"negate"],[48,17,76,0],[48,18,76,16,"bytes"],[48,23,76,0],[48,25,76,23],[49,0,77,4],[49,9,77,9],[49,13,77,13,"i"],[49,14,77,14],[49,17,77,17],[49,18,77,4],[49,20,77,20,"i"],[49,21,77,21],[49,24,77,24],[49,25,77,4],[49,27,77,27,"i"],[49,28,77,28],[49,30,77,4],[49,32,77,32],[50,0,78,8,"bytes"],[50,6,78,8,"bytes"],[50,11,78,13],[50,12,78,14,"i"],[50,13,78,13],[50,14,78,8],[50,18,78,20],[50,22,78,8],[51,0,79,5],[53,0,80,4],[53,9,80,9],[53,13,80,13,"i"],[53,14,80,14],[53,17,80,17],[53,18,80,4],[53,20,80,20,"i"],[53,21,80,21],[53,24,80,24],[53,25,80,25],[53,26,80,4],[53,28,80,28,"i"],[53,29,80,29],[53,31,80,4],[53,33,80,33],[54,0,81,8,"bytes"],[54,6,81,8,"bytes"],[54,11,81,13],[54,12,81,14,"i"],[54,13,81,13],[54,14,81,8],[56,0,82,8],[56,10,82,12,"bytes"],[56,15,82,17],[56,16,82,18,"i"],[56,17,82,17],[56,18,82,12],[56,23,82,25],[56,24,82,8],[56,26,82,28],[57,0,83,12],[58,0,84,9],[59,0,85,5],[60,0,86,1],[62,0,91,0,"module"],[62,2,91,0,"module"],[62,8,91,6],[62,9,91,7,"exports"],[62,16,91,0],[62,19,91,17],[63,0,92,4,"Int64"],[63,4,92,4,"Int64"],[63,9,92,9],[63,11,92,11,"Int64"],[64,0,91,17],[64,3,91,0]]},"type":"js/module"}]}